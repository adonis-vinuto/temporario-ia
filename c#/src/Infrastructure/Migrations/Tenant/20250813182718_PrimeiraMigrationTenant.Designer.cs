// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations.Tenant
{
    [DbContext(typeof(TenantDbContext))]
    [Migration("20250813182718_PrimeiraMigrationTenant")]
    partial class PrimeiraMigrationTenant
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Agent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int>("Module")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Agents", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ChatHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdChatSession")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalTokens")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdChatSession");

                    b.ToTable("ChatHistory", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ChatSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdAgent")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastSendDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalInteractions")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdAgent");

                    b.ToTable("ChatSessions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChangedEntity")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("IdUser")
                        .HasColumnType("char(36)");

                    b.Property<string>("LastState")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("NameUser")
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("NewState")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeProcess")
                        .HasColumnType("integer");

                    b.Property<string>("UserEmail")
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.HasKey("Id");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ChatHistory", b =>
                {
                    b.HasOne("Domain.Entities.ChatSession", "ChatSession")
                        .WithMany("ChatHistory")
                        .HasForeignKey("IdChatSession")
                        .IsRequired();

                    b.Navigation("ChatSession");
                });

            modelBuilder.Entity("Domain.Entities.ChatSession", b =>
                {
                    b.HasOne("Domain.Entities.Agent", "Agent")
                        .WithMany("Chats")
                        .HasForeignKey("IdAgent")
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Domain.Entities.Agent", b =>
                {
                    b.Navigation("Chats");
                });

            modelBuilder.Entity("Domain.Entities.ChatSession", b =>
                {
                    b.Navigation("ChatHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
