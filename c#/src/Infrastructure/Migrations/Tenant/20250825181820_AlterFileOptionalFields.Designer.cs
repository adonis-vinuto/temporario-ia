// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations.Tenant
{
    [DbContext(typeof(TenantDbContext))]
    [Migration("20250825181820_AlterFileOptionalFields")]
    partial class AlterFileOptionalFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AgentKnowledge", b =>
                {
                    b.Property<Guid>("AgentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("KnowledgesId")
                        .HasColumnType("uuid");

                    b.HasKey("AgentsId", "KnowledgesId");

                    b.HasIndex("KnowledgesId");

                    b.ToTable("AgentKnowledge");
                });

            modelBuilder.Entity("Domain.Entities.Agent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int>("Module")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Agents", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ChatHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdChatSession")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalTokens")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdChatSession");

                    b.ToTable("ChatHistory", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ChatSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdAgent")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastSendDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalInteractions")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdAgent");

                    b.ToTable("ChatSessions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime?>("AdmissionDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<DateTime?>("BirthDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("CollaboratorTypeCodeSeniorTipeCol")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("CompanyCodSeniorNumEmp")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<decimal?>("ComplementarySalary")
                        .IsRequired()
                        .HasColumnType("decimal(15, 2)");

                    b.Property<string>("CostCenterCodSeniorCodCcu")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("CostCneterName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmployeeCodSeniorNumCad")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdKnowledge")
                        .HasColumnType("uuid");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Race")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<decimal?>("Salary")
                        .IsRequired()
                        .HasColumnType("decimal(15, 2)");

                    b.Property<DateTime?>("SalaryEffectiveDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<string>("StatusCodSenior")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime?>("TerminationDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("IdKnowledge");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int?>("CompletionTime")
                        .HasColumnType("integer");

                    b.Property<int?>("CompletionTokens")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<Guid?>("IdAgent")
                        .HasColumnType("uuid");

                    b.Property<int?>("PromptTime")
                        .HasColumnType("integer");

                    b.Property<int?>("PromptTokens")
                        .HasColumnType("integer");

                    b.Property<int?>("QueueTime")
                        .HasColumnType("integer");

                    b.Property<string>("Summary")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("TotalPages")
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int?>("TotalTime")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalTokens")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdAgent");

                    b.ToTable("File", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Knowledge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int>("Module")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<int?>("Origin")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Knowledge", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChangedEntity")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("IdUser")
                        .HasColumnType("char(36)");

                    b.Property<string>("LastState")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("NameUser")
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("NewState")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeProcess")
                        .HasColumnType("integer");

                    b.Property<string>("UserEmail")
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.HasKey("Id");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdFile")
                        .HasColumnType("uuid");

                    b.Property<int>("PageNumber")
                        .HasColumnType("integer");

                    b.Property<string>("ResumePage")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("IdFile");

                    b.ToTable("Page", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Payroll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CalculationTypeCodSeniorTipCal")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("CalculationTypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("CollaboratorTypeCodeSeniorTipCol")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("CompanyCodSeniorNumEmp")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmployeeCodSeniorNumCad")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<decimal?>("EventAmount")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("EventTypeCodSeniorTipEve")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("EventTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<Guid>("IdEmployee")
                        .HasColumnType("uuid");

                    b.Property<string>("PayrollPeriodCod")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("PayrollPeriodCodSeniorCodCal")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime?>("ReferenceDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("IdEmployee");

                    b.ToTable("Payroll", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SalaryHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<string>("CompanyCodSeniorNumEmp")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmployeeCodSeniorNumCad")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<Guid>("IdEmployee")
                        .HasColumnType("uuid");

                    b.Property<string>("MotiveCodSeniorCodMot")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<decimal>("NewSalary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdEmployee");

                    b.ToTable("SalaryHistory", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SeniorErpConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdAgent")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdKnowledge")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("WsdlUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("IdAgent");

                    b.HasIndex("IdKnowledge");

                    b.ToTable("SeniorErpConfig", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SeniorHcmConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdAgent")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdKnowledge")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("WsdlUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("IdAgent");

                    b.HasIndex("IdKnowledge");

                    b.ToTable("SeniorHcmConfig", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TwilioConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountSid")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("AuthToken")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdAgent")
                        .HasColumnType("uuid");

                    b.Property<string>("WebhookUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("IdAgent");

                    b.ToTable("TwilioConfig", (string)null);
                });

            modelBuilder.Entity("AgentKnowledge", b =>
                {
                    b.HasOne("Domain.Entities.Agent", null)
                        .WithMany()
                        .HasForeignKey("AgentsId")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Knowledge", null)
                        .WithMany()
                        .HasForeignKey("KnowledgesId")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ChatHistory", b =>
                {
                    b.HasOne("Domain.Entities.ChatSession", "ChatSession")
                        .WithMany("ChatHistory")
                        .HasForeignKey("IdChatSession")
                        .IsRequired();

                    b.Navigation("ChatSession");
                });

            modelBuilder.Entity("Domain.Entities.ChatSession", b =>
                {
                    b.HasOne("Domain.Entities.Agent", "Agent")
                        .WithMany("Chats")
                        .HasForeignKey("IdAgent")
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.HasOne("Domain.Entities.Knowledge", "Knowledge")
                        .WithMany()
                        .HasForeignKey("IdKnowledge")
                        .IsRequired();

                    b.Navigation("Knowledge");
                });

            modelBuilder.Entity("Domain.Entities.File", b =>
                {
                    b.HasOne("Domain.Entities.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("IdAgent");

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Domain.Entities.Page", b =>
                {
                    b.HasOne("Domain.Entities.File", "File")
                        .WithMany("Pages")
                        .HasForeignKey("IdFile");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Domain.Entities.Payroll", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("IdEmployee")
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Entities.SalaryHistory", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("IdEmployee")
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Entities.SeniorErpConfig", b =>
                {
                    b.HasOne("Domain.Entities.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("IdAgent")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Knowledge", "Knowledge")
                        .WithMany()
                        .HasForeignKey("IdKnowledge")
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Knowledge");
                });

            modelBuilder.Entity("Domain.Entities.SeniorHcmConfig", b =>
                {
                    b.HasOne("Domain.Entities.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("IdAgent")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Knowledge", "Knowledge")
                        .WithMany()
                        .HasForeignKey("IdKnowledge")
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Knowledge");
                });

            modelBuilder.Entity("Domain.Entities.TwilioConfig", b =>
                {
                    b.HasOne("Domain.Entities.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("IdAgent")
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Domain.Entities.Agent", b =>
                {
                    b.Navigation("Chats");
                });

            modelBuilder.Entity("Domain.Entities.ChatSession", b =>
                {
                    b.Navigation("ChatHistory");
                });

            modelBuilder.Entity("Domain.Entities.File", b =>
                {
                    b.Navigation("Pages");
                });
#pragma warning restore 612, 618
        }
    }
}
